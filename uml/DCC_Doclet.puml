@startuml
'https://plantuml.com/class-diagram

skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

'Je ne met pas la classe Objet car toutes les classe hérite de Object


'Le package
'The Doclet API provides an environment which, in conjunction with the Language Model API and Compiler Tree API, allows clients to inspect the source-level structures of programs and libraries, including API comments embedded in the source.
'The standard doclet can be used to generate HTML-formatted documentation. It supports user-defined taglets, which can be used to generate customized output for user-defined tags in documentation comments.
'https://docs.oracle.com/en/java/javase/19/docs/api//jdk.javadoc/jdk/javadoc/doclet/package-summary.html
package jdk.javadoc.doclet
{
    'Méthode de l'interface : Doclet. Documentation :
    'https://docs.oracle.com/en/java/javase/18/docs/api/jdk.javadoc/jdk/javadoc/doclet/Doclet.html
    'Dans la documentation on voit que l'interface Doclet n'est implémenter que par la classe StandardDoclet
    interface Doclet <<interface>>
    {
        +{abstract} getName():String
        'Cette ligne a modifier :
        'jsp comment le mettre le type de retour
        +{abstract} getSupportOption():set<? extends Doclet.Option>
        +{abstract} getSupportedSourceVersion():SourceVersion
        +{abstract} init(locale:Locale,reporter:Reporter)
        +{abstract} run(environment:DocletEnvironment):boolean
    }


    'Une encapsulation d'option de nom, d'alias, parametres et descriptions utilisé par le Doclet.
    'https://docs.oracle.com/en/java/javase/18/docs/api/jdk.javadoc/jdk/javadoc/doclet/Doclet.Option.html
    interface Doclet.Option <<interface>>
    {
        +{abstract} getArgumentCount():Integer
        +{abstract} getDescription():String
        +{abstract} getKind():Doclet.Option.Kind
        +{abstract} getParameters():String
        +{abstract} process(option:String,arguments:String[*]):boolean
    } 


    'La classe du doclet standard qui génère la documentation en HTML
    'https://docs.oracle.com/en/java/javase/18/docs/api/jdk.javadoc/jdk/javadoc/doclet/StandardDoclet.html
    class StandardDoclet implements Doclet
    {
        +<<create>>StandardDoclet()
        'Methode de l'interface en redefines
        +init(locale:Locale,reporter:Reporter) {redefines Doclet::init}
        +getName():String {redefines Doclet::getName}
        +getSupportedOptions():Set<? extends Doclet.Option> {redefines Doclet::getSupportedOptions}
        +getSupportedSourceVersion():SourceVersion{redefines Doclet::getSupportedSourceVersion}
        +run(docEnv:DocletEnvironment):boolean{redefines Doclet::run}
        '-----------------------
        +getLocale():Locale
        +getReporter():Reporter
    }



    'L'interface pour rapporter des diagnostic ou d'autres messages
    'https://docs.oracle.com/en/java/javase/18/docs/api/jdk.javadoc/jdk/javadoc/doclet/Reporter.html
    interface Reporter <<interface>>
    {
        +{abstract}print(kind:Diagnostic.Kind,message:String)
        +{abstract}print(kind:Diagnostic.Kind,path:DocTreePath,message:String)
        'Il y a truc qui s'appelle default
        'Les méthodes default dans les interface : https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html
        'Selon ce que j'ai compris, le mot clé default dans les interfaces permettent aux méthode qui normalement sont abstraite d'avoir une implémentation par défaut
        'du coup jsp si on doit enlever les abstract dans le DCC
        +{abstract}default print(kind:Diagnostic.Kind,path:DocTreePath,start:Integer,pos:Integer,end:Integer,message:String)
        +{abstract}print(kind:Diagnostic.Kind,element:Element,message:String)
        +{abstract}default print(kind:Diagnostic.Kind,file:FileObject,start:Integer,pos:Integer,end:Integer,message:String)
        +{abstract}default getStandardWriter():PrintWriter
        +{abstract}default getDiagnosticWriter():PrintWriter
    }

    'Une énumération pour le type d'un option
    'https://docs.oracle.com/en/java/javase/19/docs/api//jdk.javadoc/jdk/javadoc/doclet/Doclet.Option.Kind.html
    enum Doclet.Option.Kind <<enumération>>
    {
        EXTENDED
        OTHER
        STANDARD

        'Les méthode de cette énumération (que 2 selon la documentation)
        +{static} values():Doclet.Option.Kind[]
        +{static} valuesOf(name:String):Doclet.Option.Kind
    }


    'Represents the operating environment of a single invocation of the doclet. This object can be used to access the program structures, various utilities and the user specified elements on the command line.
    'https://docs.oracle.com/en/java/javase/19/docs/api//jdk.javadoc/jdk/javadoc/doclet/DocletEnvironment.html
    interface DocletEnvironnment
    {
        +{abstract} getSpecifiedElements():Set<? extends Element> ()
        +{abstract} getIncludedElements():Set<? extends Element>
        +{abstract} getDocTrees():DocTrees
        +{abstract} getTypeUtils():Types
        +{abstract} isIncluded(e:Element):boolean
        +{abstract} isSelected(e:Element):boolean
        +{abstract} getJavaFileManager():JavaFileManager
        +{abstract} getSourceVersion():SourceVersion
        +{abstract} getFileKind(type:TypeElement):JavaFileObject.Kind
    }
}

'Une interface pour les outils de la ligne de commande pour fournir un moyen d'être invoquer sans démarrer une nouvelle VM
'https://download.java.net/java/GA/jdk14/docs/api/java.base/java/util/spi/ToolProvider.html
interface ToolProvider <<interface>>
{
    +{abstract}name():String
    +{abstract}run():(out:PrintWriter,err:PrintWriter,args[*]:String):Integer
    +{abstract}default run():(out:PrintWriter,err:PrintWriter,args[*]:String):Integer
    +{abstract} {static} findFirst(name:String):Optional<ToolProvider>
}


Doclet -- Doclet.Option:<<use>>
Doclet.Option -- Doclet.Option.Kind:<<use>>
StandardDoclet -- Reporter:<<use>>
StandardDoclet -- Doclet.Option:<<use>>


@enduml