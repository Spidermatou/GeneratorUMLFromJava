@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

package javax.lang.model
{
    interface element.AnnotationMirror <<interface>>
    {
        +{abstract}getAnnotationType() : DeclaredType
        +{abstract}getElementValues() : Map<? extends ExecutableElement, ? extends AnnotationValue>
    }

    interface element.AnnotationValue <<interface>>
    {
        +{abstract}accept(v:AnnotationValueVisitor<R,P>, p:P) : <R, P> R
        +{abstract}getValue() : Object
        +{abstract}toString() : String
    }

    interface element.AnnotationValueVisitor<R,P> <<interface>>
    {
        + visit(av:AnnotationValue) : default R
        +{abstract}visit(av:AnnotationValue, p:P) : R
        +{abstract}visitAnnotation(a:AnnotationMirror, p:P) : R
        +{abstract}visitArray(vals:List<? extends AnnotationValue>, p:P) : R
        +{abstract}visitBoolean(b:boolean, p:P) : R
        +{abstract}visitByte(b:byte, p:P) : R
        +{abstract}visitChar(c:char, p:P) : R
        +{abstract}visitDouble(d:double, p:P) : R
        +{abstract}visitEnumConstant(c:VariableElement, p:P) : R
        +{abstract}visitFloat(f:float, p:P) : R
        +{abstract}visitInt(i:Integer, p:P) : R
        +{abstract}visitLong(i:long, p:P) : R
        +{abstract}visitShort(s:short, p:P) : R
        +{abstract}visitString(s:String, p:P) : R
        +{abstract}visitType(t:TypeMirror, p:P) : R
        +{abstract}visitUnknown(av:AnnotationValue, p:P) : R
    }
    interface element.Element <<interface>>
    {
        +{abstract}accept(v:ElementVisitor<R,P>, p:P) : <R, P>
        +{abstract}asType() : TypeMirror
        +{abstract}equals(obj:Object) : boolean
        +{abstract}getAnnotation(annotationType:Class<A>) : <A extends Annotation> A
        +{abstract}getAnnotationMirrors() : List<? extends AnnotationMirror>
        +{abstract}getAnnotationByType(annotationType:Class<A>) : <A extends Annotation> A[]
        +{abstract}getEnclosedElements() : List<? extends Element>
        +{abstract}getEnclosingElement() : Element
        +{abstract}getKind() : ElementKind
        +{abstract}getModifiers() : Set<Modifier>
        +{abstract}getSimpleName() : Name
        +{abstract}hashCode() : Integer
    }

    enum element.ElementKind <<enumération>>
    {
        ANNOTATION_TYPE
        BINDING_VARIABLE
        CLASS
        CONSTRUCTOR
        ENUM
        ENUM_CONSTANT
        EXCEPTION_PARAMETER
        FIELD
        INSTANCE_INIT
        INTERFACE
        LOCAL_VARIABLE
        METHOD
        MODULE
        OTHER
        PACKAGE
        PARAMETER
        RECORD
        RECORD_COMPONENT
        RESOURCE_VARIABLE
        STATIC_INIT
        TYPE_PARAMETER
        +isclass() : boolean
        +isDeclaredType() : boolean
        +isExecutable() : boolean
        +isField() : boolean
        +isInitializer() : boolean
        +isInterface() : boolean
        +isVariable() : boolean
        +{static}valueOf(name:String) : ElementKind
        +{static}values() : ElementKind[]
    }

    interface element.ElementVisitor<R,P> <<interface>>
    {
        + visit(e:Element) : default R
        +{abstract}visit(e:Element, p:P) : R
        +{abstract}visitExecutable(e:ExecutableElement, p:P) : R
        + visitModule(e:ModuleElement, p:P) : default R
        +{abstract}visitPackage(e:PackageElement, p:P) : R
        + visitRecordComponent(e:RecordComponentElement, p:P) : default R
        +{abstract}visitType(e:TypeElement, p:P) : R
        +{abstract}visitTypeParameter(e:TypeParameterElement, p:P) : R
        +{abstract}visitUnknown(e:Element, p:P) : R
        +{abstract}visitVariable(e:VariableElement, p:P) : R
    }

    interface element.ExecutableElement <<interface>>
    {
        +{abstract}asType() : TypeMirror
        +{abstract}getDefaultValue() : AnnotationValue
        +{abstract}getEnclosingElement() : Element
        +{abstract}getParameters() : List<? extends VariableElement>
        +{abstract}getReceiverType() : TypeMirror
        +{abstract}getReturnType() : TypeMirror
        +{abstract}getSimpleName() : Name
        +{abstract}getThrownTypes() : List<? extends TypeMirror>
        +{abstract}getTypeParameters() : List<? extends TypeParameterElement>
        +{abstract}isDefault() : boolean
        +{abstract}isVarArgs() : boolean
    }

    enum element.Modifier <<enumération>>
    {
        ABSTRACT
        DEFAULT
        FINAL
        NATIVE
        NON_SEALED
        PRIVATE
        PROTECTED
        PUBLIC
        SEALED
        STATIC
        STRICTFP
        SYNCHRONIZED
        TRANSIENT
        VOLATILE
        + toString() : String
        +{static}valueOf(name:String) : Modifier
        +{static}values() : Modifier[]
    }

    interface element.ModuleElement <<interface>>
    {
        +{static}interface ModuleElement.Directive
        +{static}enum ModuleElement.DirectiveKind
        +{static}interface ModuleElement.DirectiveVistitor<R,P>
        +{static}interface ModuleElement.ExportsDirective
        +{static}interface ModuleElement.OpensDirective
        +{static}interface ModuleElement.ProvidesDirective
        +{static}interface ModuleElement.RequiresDirective
        +{static}interface ModuleElement.UsesDirective
        +{abstract}asType() : TypeMirror
        +{abstract}getDirectives() : List<? extends ModuleElement.Directive>
        +{abstract}getEnclosedElements() : List<? extends Element>
        +{abstract}getEnclosingElement() : Element
        +{abstract}getQualifiedName() : Name
        +{abstract}getSimpleName() : Name
        +{abstract}isOpen() : boolean
        +{abstract}isUnnamed() : boolean
    }

    interface element.Name <<interface>>
    {
        +{abstract}contentEquals(cs : CharSequence) : boolean
        +{abstract}equals(obj:Object) : boolean
        +{abstract}hashCode() : Integer
    }

    enum element.NestingKind <<enumération>>
    {
        ANONYMOUS
        LOCAL
        MEMBER
        TOP_LEVEL
        + isNested() : boolean
        +{static}valueOf(name:String) : NestingKind
        +{static}values() : NestingKind[]
    }

    interface element.PackageElement <<interface>>
    {
        +{abstract}asType() : TypeMirror
        +{abstract}getEnclosedElements() : List<? extends Element>
        +{abstract}getEnclosingElement() : Element
        +{abstract}getQualifiedName() : Name
        +{abstract}getSimpleName() : Name
        +{abstract}isUnnamed() : boolean
    }

    interface element.Parameterizable <<interface>>
    {
        +{abstract}getTypeParameters() : List<? extends TypeParameterElement>
    }

    interface element.QualifiedNameable <<interface>>
    {
        +{abstract}getQualifiedName() : Name
    }

    interface element.RecordComponentElement <<interface>>
    {
        +{abstract}getAccessor() : ExecutableElement
        +{abstract}getEnclosingElement() : Element
        +{abstract}getSimpleName() : Name
    }

    interface element.TypeElement <<interface>>
    {
        +{abstract}asType() : TypeMirror
        +{abstract}getEnclosedElements() : List<? extends Element>
        +{abstract}getEnclosingElement() : Element
        +{abstract}getInterfaces() : List<? extends TypeMirror>
        +{abstract}getNestingKind() : NestingKind
        + getPermittedSubClasses() : default List<? extends TypeMirror>
        +{abstract}getQualifiedName() : Name
        + getRecordComponents() : default List<? extends RecordComponentElement>
        +{abstract}getSimpleName() : Name
        +{abstract}getSuperClass() : TypeMirror
        +{abstract}getTypeParameters() : List<? extends TypeParameterElement>
    }

    interface element.TypeParameterElement <<interface>>
    {
        +{abstract}asType() : TypeMirror
        +{abstract}getBounds() : List<? extends TypeMirror>
        +{abstract}getEnclosingElement() : Element
        +{abstract}getGenericElement() : Element
    }

    class element.UnknownAnnotationValueException
    {
        +<<create>>UnknownAnnotationValueException(av:AnnotationValue,p:Object)
        + getArgument() : Object
        + getUnknownAnnotationValue() : AnnotationValue
    }

    class element.UnknownDirectiveException
    {
        +<<create>>UnknownDirectiveException(d:ModuleElement.Directive,p:Object)
        + getArgument() : Object
        + getUnknownDirective() : ModuleElement.Directive
    }

    class element.UnknownElementException
    {
        +<<create>>UnknownElementException(e:Element,p:Object)
        + getArgument() : Object
        + getUnknownElement() : Element
    }

    interface element.VariableElement <<interface>>
    {
        +{abstract}asType() : TypeMirror
        +{abstract}getConstantValue() : Object
        +{abstract}getEnclosingElement() : Element
        +{abstract}getSimpleName() : Name
    }

    interface type.ArrayType <<interface>>
    {
        +{abstract}getComponentType() : TypeMirror
    }

    interface type.DeclaredType <<interface>>
    {
        +{abstract}asElement() : Element
        +{abstract}getEnclosingElement() : TypeMirror
        +{abstract}getTypeArguments() : List<? extends TypeMirror>
    }

    interface type.ErrorType <<interface>>

    interface type.ExecutableType <<interface>>
    {
        +{abstract}getParametersType() : List<? extends TypeMirror>
        +{abstract}getReceiverType() : TypeMirror
        +{abstract}getReturnType() : TypeMirror
        +{abstract}getThrownTypes() : List<? extends TypeMirror>
        +{abstract}getTypeVariables() : List<? extends TypeVariable>
    }

    interface type.IntersectionType <<interface>>
    {
        +{abstract}getBounds() : List<? extends TypeMirror>
    }

    class type.MirroredTypeException
    {
        +<<create>>MirroredTypeException(type:TypeMirror)
        + getTypeMirror() : TypeMirror
    }

    class type.MirroredTypesException
    {
        +<<create>>MirroredTypesException(types:List<? extends TypeMirror>)
        + getTypeMirror() : List<? extends TypeMirror>
    }

    interface type.NoType <<interface>>

    interface type.NullType <<interface>>

    interface type.PrimitiveType <<interface>>

    interface type.ReferenceType <<interface>>

    enum type.TypeKind <<enumération>>
    {
        ARRAY
        BOOLEAN
        BYTE
        CHAR
        DECLARED
        DOUBLE
        ERROR
        EXECUTABLE
        FLOAT
        INT
        INTERSECTION
        LONG
        MODULE
        NONE
        NULL
        OTHER
        PACKAGE
        SHORT
        TYPEVAR
        UNION
        VOID
        WILDCARD

        + isPrimitive() : boolean
        +{static}valueOf(name:String) : TypeKind
        +{static}values() : TypeKind[]
    }

    interface type.TypeMirror <<interface>>
    {
        +{abstract}accept(v:TypeVisitor<R,P>,p:P) : <R,P> R
        +{abstract}equals(obj:Object) : boolean
        +{abstract}getAnnotation(annotationType:Class<A>) : <A extends Annotation> A
        +{abstract}getAnnotationMirrors() : List<? extends AnnotationMirror>
        +{abstract}getAnnotationByType(annotationType:Class<A>) : <A extends Annotation> A[]
        +{abstract}getKind() : TypeKind
        +{abstract}hashCode() : Integer
        +{abstract}toString() : String
    }

    interface type.TypeVariable <<interface>>
    {
        +{abstract}asElement() : Element
        +{abstract}getLowerBound() : TypeMirror
        +{abstract}getUpperBound() : TypeMirror
    }

    interface type.TypeVisitor<R,P> <<interface>>
    {
        + visit(type:TypeMirror) : default R
        +{abstract}visitUnknown(type:TypeMirror, p:P) : R
        +{abstract}visitArray(t:ArrayType, p:P) : R
        +{abstract}visitDeclared(t:DeclaredType, p:P) : R
        +{abstract}visitError(t:ErrorType, p:P) : R
        +{abstract}visitExecutable(t:ExecutableType, p:P) : R
        +{abstract}visitIntersection(t:IntersectionType, p:P) : R
        +{abstract}visitNoType(t:NoType, p:P) : R
        +{abstract}visitNull(t:NullType, p:P) : R
        +{abstract}visitPrimitive(t:PrimitiveType, p:P) : R
        +{abstract}visitTypeVariable(t:TypeVariable, p:P) : R
        +{abstract}visitUnion(t:UnionType, p:P) : R
        +{abstract}visitUnknown(type:TypeMirror, p:P) : R
        +{abstract}visitWildcard(t:WildcardType, p:P) : R
    }

    interface type.UnionType <<interface>>
    {
        +{abstract}getAlternatives() : List<? extends TypeMirror>
    }

    class type.UnknownTypeException
    {
        +<<create>>UnknownTypeException(type:TypeMirror, p:Object)
        + getArgument() : Object
        + getUnknownType() : TypeMirror
    }

    interface type.WildcardType <<interface>>
    {
        +{abstract}getExtendsBound() : TypeMirror
        +{abstract}getSuperBound() : TypeMirror
    }

    class util.AbstractAnnotationValueVisitor14<R,P>
    {
        -<<create>>AbstractAnnotationValueVisitor14()
    }

    class util.AbstractAnnotationValueVisitor6<R,P>
        {
            -<<create>>AbstractAnnotationValueVisitor6()
        }

    class util.AbstractAnnotationValueVisitor7<R,P>
        {
            -<<create>>AbstractAnnotationValueVisitor7()
        }

    class util.AbstractAnnotationValueVisitor8<R,P>
        {
            -<<create>>AbstractAnnotationValueVisitor8()
        }

    class util.AbstractAnnotationValueVisitor9<R,P>
        {
            -<<create>>AbstractAnnotationValueVisitor9()
        }

    class util.AbstractElementVisitor14<R,P>
    {
        -<<create>>AbstractElementVisitor14()
        +{abstract}visitRecordComponent(e:RecordComponentElement,p:P) : abstract R
    }

    class util.AbstractElementVisitor6<R,P>
    {
        -<<create>>AbstractElementVisitor6()
        + visit(e:Element) : final R
        + visit(e:Element, p:P) : final R
        + visitModule(e:ModuleElement, p:P) : R
        + visitRecordComponent(e:RecordComponentElement,p:P) : R
        + visitUnknown(e:Element, p:P) : R
    }

    class util.AbstractElementVisitor7<R,P>
        {
            -<<create>>AbstractElementVisitor7()
        }

    class util.AbstractElementVisitor8<R,P>
        {
            -<<create>>AbstractElementVisitor8()
        }

    class util.AbstractElementVisitor9<R,P>
        {
            -<<create>>AbstractElementVisitor9()
            +{abstract}visitModule(e:ModuleElement,p:P) : abstract R
        }

    class util.AbstractTypeVisitor14<R,P>
    {
        -<<create>>AbstractTypeVisitor14()
    }

    class util.AbstractTypeVisitor6<R,P>
    {
        -<<create>>AbstractTypeVisitor6()
        + visit(type:TypeMirror) : final R
        + visit(type:TypeMirror, p:P) : final R
        + visitIntersection(t:IntersectionType, p:P) : R
        + visitUnion(t:UnionType, p:P) : R
        + visitUnknown(type:TypeMirror, p:P) : R
    }

    class util.AbstractTypeVisitor7<R,P>
    {
        -<<create>>AbstractTypeVisitor7()
        + visitUnion(t:UnionType, p:P) : abstract R
    }

    class util.AbstractTypeVisitor8<R,P>
    {
        -<<create>>AbstractTypeVisitor8()
        + visitIntersection(t:IntersectionType, p:P) : abstract R
    }

    class util.AbstractTypeVisitor9<R,P>
    {
        -<<create>>AbstractTypeVisitor9()
    }

    class util.ElementFilter
    {
        +{static}constructorsIn(elements:Iterable<? extends Element>) : List<ExecutableElement>
        +{static}constructorsIn(elements:Set<? extends Element>) : Set<ExecutableElement>
        +{static}exportsIn(directives:Iterable<? extends ModuleElement.Directive>) : List<ModuleElement.ExportsDirective>
        +{static}fieldsIn(elements:Iterable<? extends Element>) : List<VariableElement>
        +{static}fieldsIn(elements:Set<? extends Element>) : Set<VariableElement>
        +{static}methodsIn(elements:Iterable<? extends Element>) : List<ExecutableElement>
        +{static}methodsIn(elements:Set<? extends Element>) : Set<ExecutableElement>
        +{static}modulesIn(elements:Iterable<? extends Element>) : List<ModuleElement>
        +{static}modulesIn(elements:Set<? extends Element>) : Set<ModuleElement>
        +{static}opensIn(directives:Iterable<? extends ModuleElement.Directive>) : List<ModuleElement.OpensDirective>
        +{static}packagesIn(elements:Iterable<? extends Element>) : List<PackageElement>
        +{static}packagesIn(elements:Set<? extends Element>) : Set<PackageElement>
        +{static}providesIn(directives:Iterable<? extends ModuleElement.Directive>) : List<ModuleElement.ProvidesDirective>
        +{static}recordComponentIn(elements:Iterable<? extends Element>) : List<RecordComponentElement>
        +{static}recordComponentIn(elements:Set<? extends Element>) : Set<RecordComponentElement>
        +{static}requiresIn(directives:Iterable<? extends ModuleElement.Directive>) : List<ModuleElement.RequiresDirective>
        +{static}typesIn(elements:Iterable<? extends Element>) : List<TypeElement>
        +{static}typesIn(elements:Set<? extends Element>) : Set<TypeElement>
        +{static}usesIn(directives:Iterable<? extends ModuleElement.Directive>) : List<ModuleElement.UsesDirective>

    }

    class util.ElementKindVisitor14<R,P>
    {
        -<<create>>ElementKindVisitor14()
        -<<create>>ElementKindVisitor14(defaultValue:R)
        + visitRecordComponent(e:RecordComponentElement, p:P) : R
        + visitTypeAsRecord(e:TypeElement, p:P) : R
        + visitVariableAsBindingVariable(e:VariableElement, p:P) : R
    }

    class util.ElementKindVisitor6<R,P>
    {
        -<<create>>ElementKindVisitor6()
        -<<create>>ElementKindVisitor6(defaultValue:R)
        + visitExecutable(e:ExecutableElement, p:P) : R
        + visitExecutableAsConstructor(e:ExecutableElement, p:P) : R
        + visitExecutableAsInstanceInit(e:ExecutableElement, p:P) : R
        + visitExecutableAsMethod(e:ExecutableElement, p:P) : R
        + visitExecutableAsStaticInit(e:ExecutableElement, p:P) : R
        + visitPackage(e:PackageElement, p:P) : R
        + visitType(e:TypeElement, p:P) : R
        + visitTypeAsAnnotationType(e:TypeElement, p:P) : R
        + visitTypeAsClass(e:TypeElement, p:P) : R
        + visitTypeAsEnum(e:TypeElement, p:P) : R
        + visitTypeAsInterface(e:TypeElement, p:P) : R
        + visitTypeAsRecord(e:TypeElement, p:P) : R
        + visitTypeParameter(e:TypeParameterElement, p:P) : R
        + visitVariable(e:VariableElement, p:P) : R
        + visitVariableAsBindingVariable(e:VariableElement, p:P) : R
        + visitVariableAsEnumConstant(e:VariableElement, p:P) : R
        + visitVariableAsExceptionParameter(e:VariableElement, p:P) : R
        + visitVariableAsField(e:VariableElement, p:P) : R
        + visitVariableAsLocalVariable(e:VariableElement, p:P) : R
        + visitVariableAsParameter(e:VariableElement, p:P) : R
        + visitVariableAsResourceVariable(e:VariableElement, p:P) : R
    }

    class util.ElementKindVisitor7<R,P>
    {
        -<<create>>ElementKindVisitor7()
        -<<create>>ElementKindVisitor7(defaultValue:R)
        + visitVariableAsResourceVariable(e:VariableElement, p:P) : R
    }

    class util.ElementKindVisitor8<R,P>
    {
        -<<create>>ElementKindVisitor8()
        -<<create>>ElementKindVisitor8(defaultValue:R)
    }

    class util.ElementKindVisitor9<R,P>
    {
        -<<create>>ElementKindVisitor9()
        -<<create>>ElementKindVisitor9(defaultValue:R)
        + visitModule(e:ModuleElement, p:P) : R
    }

    interface util.Elements <<interface>>
    {
        +{static}enum Elements.Origin
        +{abstract}getAllAnnotationMirrors(e:Element) : List<? extends AnnotationMirror>
        +{abstract}getAllMembers(type:TypeElement) : List<? extends Element>
        + getAllModuleElements() : default Set<? extends ModuleElement>
        + getAllPackageElements(name:CharSequence) : default Set<? extends PackageElement>
        + getAllTypeElements(name:CharSequence) : default Set<? extends TypeElement>
        +{abstract}getBinaryName(type:TypeElement) : Name
        +{abstract}getConstantExpression(value:Object) : String
        +{abstract}getDocComment(e:Element) : String
        +{abstract}getElementValuesWithDefaults(av:AnnotationMirror) : Map<? extends ExecutableElement, ? extends AnnotationValue>
        + getFileObjectOf(e:Element) : default JavaFileObject
        + getModuleElement(name:CharSequence) : default ModuleElement
        + getModuleOf(e:Element) : default ModuleElement
        +{abstract}getName(cs:CharSequence) : Name
        + getOrigin(c:AnnotatedConstruct, a:AnnotationMirror) : default Elements.Origin
        + getOrigin(e:Element) : default Elements.Origin
        + getOrigin(m:ModuleElement, directive:ModuleElement.Directive) : default Elements.Origin
        + getOutermostTypeElement(e:Element) : default TypeElement
        +{abstract}getPackageElement(name:CharSequence) : PackageElement
        + getPackageElement(module:ModuleElement, name:CharSequence) : default PackageElement
        +{abstract}getPackageOf(e:Element) : PackageElement
        +{abstract}getTypeElement(name:CharSequence) : TypeElement
        + getTypeElement(module:ModuleElement, name:CharSequence) : default TypeElement
        +{abstract}hides(hider:Element, hidden:Element) : boolean
        + isAutomaticModule(module:ModuleElement) : default boolean
        + isBridge(e:ExecutableElement) : default boolean
        +{abstract}isDeprecated(e:Element) : boolean
        +{abstract}isFunctionalInterface(type:TypeElement) : boolean
        +{abstract}overrides(overrider:ExecutableElement, overridden:ExecutableElement, type:TypeElement) : boolean
        +{abstract}printElements(w:Writer, elements:Element...)
        + recordComponentFor(accessor:ExecutableElement) : default RecordComponentElement

    }

    enum util.Origin <<Enum>>
    {
        EXPLICIT
        MANDATED
        SYNTHETIC
        + isDeclared() : boolean
        +{static}valueOf(name:String) : Elements.Origin
        +{static}values() : Elements.Origin[]
    }

    util.Origin --|> util.Elements

    class util.ElementScanner14<R,P>
    {
        -<<create>>ElementsScanner14()
        -<<create>>ElementsScanner14(defaultValue:R)
        + visitExecutable(e:ExecutableElement, p:P) : R
        + visitRecordComponent(e:RecordComponentElement, p:P) : R
        + visitType(e:TypeElement, p:P) : R
    }

    class util.ElementScanner6<R,P>
    {
        -{final}DEFAULT_VALUE : R
        -<<create>>ElementsScanner6()
        -<<create>>ElementsScanner6(defaultValue:R)
        + scan(iterable:Iterable<? extends Element>, p:P) : final R
        + scan(e:Element) : final R
        + scan(e:Element, p:P) : R
        + visitExecutable(e:ExecutableElement, p:P) : R
        + visitPackage(e:PackageElement, p:P) : R
        + visitType(e:TypeElement, p:P) : R
        + visitTypeParameter(e:TypeParameterElement, p:P) : R
        + visitVariable(e:VariableElement, p:P) : R
    }

    class util.ElementScanner7<R,P>
    {
        -<<create>> ElementsScanner7()
        -<<create>> ElementsScanner7(defaultValue:R)
        + visitVariable(e:VariableElement, p:P) : R
    }

    class util.ElementScanner8<R,P>
    {
        -<<create>> ElementsScanner8()
        -<<create>> ElementsScanner8(defaultValue:R)
    }

    class util.ElementScanner9<R,P>
    {
        -<<create>>ElementsScanner9()
        -<<create>>ElementsScanner9(defaultValue:R)
        + visitModule(e:ModuleElement, p:P) : R
    }

    class util.SimpleAnnotationValueVisitor14<R,P>
    {
        -<<create>>SimpleAnnotationValueVisitor14()
        -<<create>>SimpleAnnotationValueVisitor14(defaultValue:R)
    }

    class util.SimpleAnnotationValueVisitor6<R,P>
    {
        -{final}DEFAULT_VALUE : R
        -<<create>>SimpleAnnotationValueVisitor6()
        -<<create>>SimpleAnnotationValueVisitor6(defaultValue:R)
        - defaultAction(o:Object, p:P) : R
        + visitAnnotation(a:AnnotationMirror, p:P) : R
        + visitArray(vals:List<? extends AnnotationValue>, p:P) : R
        + visitBoolean(b:boolean, p:P) : R
        + visitByte(b:byte, p:P) : R
        + visitChar(c:char, p:P) : R
        + visitDouble(d:double, p:P) : R
        + visitEnumConstant(c:VariableElement, p:P) : R
        + visitFloat(f:Float, p:P) : R
        + visitInt(i:Integer, p:P) : R
        + visitLong(i:long , p:P) : R
        + visitShort(s:short, p:P) : R
        + visitString(s:String, p:P) : R
        + visitType(t:TypeMirror, p:P) : R
    }

    class util.SimpleAnnotationValueVisitor7<R,P>
    {
        -<<create>>SimpleAnnotationValueVisitor7()
        -<<create>>SimpleAnnotationValueVisitor7(defaultValue:R)
    }

    class util.SimpleAnnotationValueVisitor8<R,P>
    {
        -<<create>>SimpleAnnotationValueVisitor8()
        -<<create>>SimpleAnnotationValueVisitor8(defaultValue:R)
    }

    class util.SimpleAnnotationValueVisitor9<R,P>
    {
        -<<create>>SimpleAnnotationValueVisitor9()
        -<<create>>SimpleAnnotationValueVisitor9(defaultValue:R)
    }

    class util.SimpleElementVisitor14<R,P>
    {
        -<<create>>SimpleElementVisitor14()
        -<<create>>SimpleElementVisitor14(defaultValue:R)
        + visitRecordComponent(e:RecordComponentElement, p:P) : R
    }

    class util.SimpleElementVisitor6<R,P>
    {
        -{final}DEFAULT_VALUE : R
        -<<create>>SimpleElementVisitor6()
        -<<create>>SimpleElementVisitor6(defaultValue:R)
        - defaultAction(e:Element, p:P) : R
        + visitExecutable(e:ExecutableElement, p:P) : R
        + visitPackage(e:PackageElement, p:P) : R
        + visitType(e:TypeElement, p:P) : R
        + visitTypeParameter(e:TypeParameterElement, p:P) : R
        + visitVariable(e:VariableElement, p:P) : R
    }

    class util.SimpleElementVisitor7<R,P>
    {
        -<<create>>SimpleElementVisitor7()
        -<<create>>SimpleElementVisitor7(defaultValue:R)
        +visitVariable(e:VariableElement, p:P) : R
    }

    class util.SimpleElementVisitor8<R,P>
    {
        -<<create>>SimpleElementVisitor8()
        +<<create>>SimpleElementVisitor8(defaultValue:R)
    }

    class util.SimpleElementVisitor9<R,P>
    {
        -<<create>>SimpleElementVisitor9()
        -<<create>>SimpleElementVisitor9(defaultValue:R)
        + visitModule(e:ModuleElement, p:P) : R
    }

    class util.SimpleTypeVisitor14<R,P>
    {
        -<<create>>SimpleTypeVisitor14()
        -<<create>>SimpleTypeVisitor14(defaultValue:R)
    }

    class util.SimpleTypeVisitor6<R,P>
    {
        -{final}DEFAULT_VALUE : R
        -<<create>>SimpleTypeVisitor6()
        -<<create>>SimpleTypeVisitor6(defaultValue:R)
        - defaultAction(type:TypeMirror, p:P) : R
        + visitArray(t:ArrayType, p:P) : R
        + visitDeclared(t:DeclaredType, p:P) : R
        + visitError(t:ErrorType, p:P) : R
        + visitExecutable(t:ExecutableType, p:P) : R
        + visitNoType(t:NoType, p:P) : R
        + visitNull(t:NullType, p:P) : R
        + visitPrimitive(t:PrimitiveType, p:P) : R
        + visitTypeVariable(t:TypeVariable, p:P) : R
        + visitWildcard(t:WildcardType, p:P) : R
    }

    class util.SimpleTypeVisitor7<R,P>
    {
        -<<create>>SimpleTypeVisitor7()
        -<<create>>SimpleTypeVisitor7(defaultValue:R)
        + visitUnion(t:UnionType, p:P) : R
    }

    class util.SimpleTypeVisitor8<R,P>
    {
        -<<create>>SimpleTypeVisitor8()
        -<<create>>SimpleTypeVisitor8(defaultValue:R)
        + visitIntersection(t:IntersectionType, p:P) : R
    }

    class util.SimpleTypeVisitor9<R,P>
    {
        -<<create>>SimpleTypeVisitor9()
        -<<create>>SimpleTypeVisitor9(defaultValue:R)
    }

    class util.TypeKindVisitor14<R,P>
    {
        -<<create>>TypeKindVisitor14()
        -<<create>>TypeKindVisitor14(defaultValue:R)
    }

    class util.TypeKindVisitor6<R,P>
    {
        -<<create>>TypeKindVisitor6()
        -<<create>>TypeKindVisitor6(defaultValue:R)
        + visitNoType(t:NoType, p:P) : R
        + visitTypeAsModule(t:NoType, p:P) : R
        + visitNoTypeAsNone(t:NoType, p:P) : R
        + visitNoTypeAsPackage(t:NoType, p:P) : R
        + visitNoTypeAsVoid(t:NoType, p:P) : R
        + visitPrimitive(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsBoolean(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsByte(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsChar(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsDouble(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsFloat(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsInt(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsLong(t:PrimitiveType, p:P) : R
        + visitPrimitiveAsShort(t:PrimitiveType, p:P) : R
    }

    class util.TypeKindVisitor7<R,P>
    {
        -<<create>>TypeKindVisitor7()
        -<<create>>TypeKindVisitor7(defaultValue:R)
        + visitUnion(t:UnionType, p:P) : R
    }

    class util.TypeKindVisitor8<R,P>
    {
        -<<create>>TypeKindVisitor8()
        -<<create>>TypeKindVisitor8(defaultValue:R)
        + visitIntersection(t:IntersectionType, p:P) : R
    }

    class util.TypeKindVisitor9<R,P>
    {
        -<<create>>TypeKindVisitor9()
        -<<create>>TypeKindVisitor9(defaultValue:R)
        + visitNoTypeAsModule(t:NoType, p:P) : R
    }

    interface util.Types <<interface>>
    {
        +{abstract}asElement(type:TypeMirror) : Element
        +{abstract}asMemberOf(containing:DeclaredType, element:Element) : TypeMirror
        +{abstract}boxedClass(p:PrimitiveType) : TypeElement
        +{abstract}capture(type:TypeMirror) : TypeMirror
        +{abstract}contains(t1:TypeMirror, t2:TypeMirror) : boolean
        +{abstract}directSupertypes(t:TypeMirror) : List<? extends TypeMirror>
        +{abstract}erasure(t:TypeMirror) : TypeMirror
        +{abstract}getArrayType(componentType:TypeMirror) : ArrayType
        +{abstract}getDeclaredType(typeElem:TypeElement, typeArgs:TypeMirror...) : DeclaredType
        +{abstract}getDeclaredType(containing:DeclaredType, typeElem:TypeElement, typeArgs:TypeMirror...) : DeclaredType
        +{abstract}getNoType(kind:TypeKind) : NoType
        +{abstract}getNullType() : NullType
        +{abstract}getPrimitiveType(kind:TypeKind) : PrimitiveType
        +{abstract}getWildcardType(extendsBound:TypeMirror, superBound:TypeMirror) : WildcardType
        +{abstract}isAssignable(t1:TypeMirror, t2:TypeMirror) : boolean
        +{abstract}isSameType(t1:TypeMirror, t2:TypeMirror) : boolean
        +{abstract}isSubsignature(m1:ExecutableType, m2:ExecutableType) : boolean
        +{abstract}isSubtype(t1:TypeMirror, t2:TypeMirror) : boolean
        +{abstract}unboxedType(t:TypeMirror) : PrimitiveType
    }

    interface AnnotatedConstruct <<interface>>
    {
        +{abstract}getAnnotation(annotationType:Class<A>) : <A extends Annotation> A
        +{abstract}getAnnotationMirrors() : List<? extends AnnotationMirror>
        +{abstract}getAnnotationByType(annotationType:Class<A>) : <A extends Annotation> A[]
    }

    enum SourceVersion <<enumeration>>
    {
        RELEASE_0
        RELEASE_1
        RELEASE_10
        RELEASE_11
        RELEASE_12
        RELEASE_13
        RELEASE_14
        RELEASE_15
        RELEASE_16
        RELEASE_17
        RELEASE_18
        RELEASE_19
        RELEASE_2
        RELEASE_3
        RELEASE_4
        RELEASE_5
        RELEASE_6
        RELEASE_7
        RELEASE_8
        RELEASE_9
        +{static}isIdentifier(name:CharSequence) : boolean
        +{static}isKeyWord(s:CharSequence) : boolean
        +{static}isKeyWord(s:CharSequence, version:SourceVersion) : boolean
        +{static}isName(name:CharSequence) : boolean
        +{static}isName(name:CharSequence, version:SourceVersion) : boolean
        +{static}latest() : SourceVersion
        +{static}latestSupported() : SourceVersion
        + runtimeVersion() : Runtime.Version
        +{static}valueOf(rv:Runtime.Version) : SourceVersion
        +{static}valueOf(name:String) : SourceVersion
        +{static}values() : SourceVersion[]
    }

    class UnknownEntityException
    {
        -<<create>>UnknownEntityException(message:String)
    }
}

javax.lang.model.SourceVersion --|> java.lang.Enum

javax.lang.model.UnknownEntityException --|> java.lang.Throwable

javax.lang.model.element.Element --|> javax.lang.model.AnnotatedConstruct

javax.lang.model.element.ElementKind --|> java.lang.Enum

javax.lang.model.element.ExecutableElement --|> javax.lang.model.element.Element

javax.lang.model.element.ExecutableElement --|> javax.lang.model.element.Parameterizable

javax.lang.model.element.Modifier --|> java.lang.Enum

javax.lang.model.element.ModuleElement --|> javax.lang.model.element.Element

javax.lang.model.element.ModuleElement --|> javax.lang.model.element.QualifiedNameable

javax.lang.model.element.Name --|> java.lang.CharSequence

javax.lang.model.element.NestingKind --|> java.lang.Enum

javax.lang.model.element.PackageElement --|> javax.lang.model.element.Element

javax.lang.model.element.PackageElement --|> javax.lang.model.element.QualifiedNameable

javax.lang.model.element.Parameterizable --|> javax.lang.model.element.Element

javax.lang.model.element.QualifiedNameable --|> javax.lang.model.element.Element

javax.lang.model.element.RecordComponentElement --|> javax.lang.model.element.Element

javax.lang.model.element.TypeElement --|> javax.lang.model.element.Element

javax.lang.model.element.TypeElement --|> javax.lang.model.element.Parameterizable

javax.lang.model.element.TypeElement --|> javax.lang.model.element.QualifiedNameable

javax.lang.model.element.TypeParameterElement --|> javax.lang.model.element.Element

javax.lang.model.element.UnknownAnnotationValueException --|> javax.lang.model.UnknownEntityException

javax.lang.model.element.UnknownDirectiveException --|> javax.lang.model.UnknownEntityException

javax.lang.model.element.UnknownElementException --|> javax.lang.model.UnknownEntityException

javax.lang.model.element.VariableElement --|> javax.lang.model.element.Element

javax.lang.model.type.ArrayType --|> javax.lang.model.type.ReferenceType

javax.lang.model.type.DeclaredType --|> javax.lang.model.type.ReferenceType

javax.lang.model.type.ErrorType --|> javax.lang.model.type.DeclaredType

javax.lang.model.type.ExecutableType --|> javax.lang.model.type.TypeMirror

javax.lang.model.type.IntersectionType --|> javax.lang.model.type.TypeMirror

javax.lang.model.type.MirroredTypeException --|> javax.lang.model.type.MirroredTypesException

javax.lang.model.type.MirroredTypesException --|> java.lang.Throwable

javax.lang.model.type.NoType --|> javax.lang.model.type.TypeMirror

javax.lang.model.type.NullType --|> javax.lang.model.type.ReferenceType

javax.lang.model.type.PrimitiveType --|> javax.lang.model.type.TypeMirror

javax.lang.model.type.ReferenceType --|> javax.lang.model.type.TypeMirror

javax.lang.model.type.TypeKind --|> java.lang.Enum

javax.lang.model.type.TypeMirror --|> javax.lang.model.AnnotatedConstruct

javax.lang.model.type.TypeVariable --|> javax.lang.model.type.ReferenceType

javax.lang.model.type.UnionType --|> javax.lang.model.type.TypeMirror

javax.lang.model.type.UnknownTypeException --|> javax.lang.model.UnknownEntityException

javax.lang.model.type.WildcardType --|> javax.lang.model.type.TypeMirror

javax.lang.model.util.AbstractAnnotationValueVisitor14 --|> javax.lang.model.util.AbstractAnnotationValueVisitor9

javax.lang.model.util.AbstractAnnotationValueVisitor6 --|> java.lang.Object

javax.lang.model.util.AbstractAnnotationValueVisitor7 --|> javax.lang.model.util.AbstractAnnotationValueVisitor6

javax.lang.model.util.AbstractAnnotationValueVisitor8 --|> javax.lang.model.util.AbstractAnnotationValueVisitor7

javax.lang.model.util.AbstractAnnotationValueVisitor9 --|> javax.lang.model.util.AbstractAnnotationValueVisitor8

javax.lang.model.util.AbstractElementVisitor14 --|> javax.lang.model.util.AbstractElementVisitor9

javax.lang.model.util.AbstractElementVisitor6 --|> java.lang.Object

javax.lang.model.util.AbstractElementVisitor7 --|> javax.lang.model.util.AbstractElementVisitor6

javax.lang.model.util.AbstractElementVisitor8 --|> javax.lang.model.util.AbstractElementVisitor7

javax.lang.model.util.AbstractElementVisitor9 --|> javax.lang.model.util.AbstractElementVisitor8

javax.lang.model.util.AbstractTypeVisitor14 --|> javax.lang.model.util.AbstractTypeVisitor9

javax.lang.model.util.AbstractTypeVisitor6 --|> java.lang.Object

javax.lang.model.util.AbstractTypeVisitor7 --|> javax.lang.model.util.AbstractTypeVisitor6

javax.lang.model.util.AbstractTypeVisitor8 --|> javax.lang.model.util.AbstractTypeVisitor7

javax.lang.model.util.AbstractTypeVisitor9 --|> javax.lang.model.util.AbstractTypeVisitor8

javax.lang.model.util.ElementFilter --|> java.lang.Object

javax.lang.model.util.ElementKindVisitor14 --|> javax.lang.model.util.ElementKindVisitor9

javax.lang.model.util.ElementKindVisitor6 --|> java.lang.Object

javax.lang.model.util.ElementKindVisitor7 --|> javax.lang.model.util.ElementKindVisitor6

javax.lang.model.util.ElementKindVisitor8 --|> javax.lang.model.util.ElementKindVisitor7

javax.lang.model.util.ElementKindVisitor9 --|> javax.lang.model.util.ElementKindVisitor8

javax.lang.model.util.ElementScanner14 --|> javax.lang.model.util.ElementScanner9

javax.lang.model.util.ElementScanner6 --|> java.lang.Object

javax.lang.model.util.ElementScanner7 --|> javax.lang.model.util.ElementScanner6

javax.lang.model.util.ElementScanner8 --|> javax.lang.model.util.ElementScanner7

javax.lang.model.util.ElementScanner9 --|> javax.lang.model.util.ElementScanner8

javax.lang.model.util.SimpleAnnotationValueVisitor14 --|> javax.lang.model.util.SimpleAnnotationValueVisitor9

javax.lang.model.util.SimpleAnnotationValueVisitor6 --|> java.lang.Object

javax.lang.model.util.SimpleAnnotationValueVisitor7 --|> javax.lang.model.util.SimpleAnnotationValueVisitor6

javax.lang.model.util.SimpleAnnotationValueVisitor8 --|> javax.lang.model.util.SimpleAnnotationValueVisitor7

javax.lang.model.util.SimpleAnnotationValueVisitor9 --|> javax.lang.model.util.SimpleAnnotationValueVisitor8

javax.lang.model.util.SimpleElementVisitor14 --|> javax.lang.model.util.SimpleElementVisitor9

javax.lang.model.util.SimpleElementVisitor6 --|> java.lang.Object

javax.lang.model.util.SimpleElementVisitor7 --|> javax.lang.model.util.SimpleElementVisitor6

javax.lang.model.util.SimpleElementVisitor8 --|> javax.lang.model.util.SimpleElementVisitor7

javax.lang.model.util.SimpleElementVisitor9 --|> javax.lang.model.util.SimpleElementVisitor8

javax.lang.model.util.SimpleTypeVisitor14 --|> javax.lang.model.util.SimpleTypeVisitor9

javax.lang.model.util.SimpleTypeVisitor6 --|> java.lang.Object

javax.lang.model.util.SimpleTypeVisitor7 --|> javax.lang.model.util.SimpleTypeVisitor6

javax.lang.model.util.SimpleTypeVisitor8 --|> javax.lang.model.util.SimpleTypeVisitor7

javax.lang.model.util.SimpleTypeVisitor9 --|> javax.lang.model.util.SimpleTypeVisitor8

javax.lang.model.util.TypeKindVisitor14 --|> javax.lang.model.util.TypeKindVisitor9

javax.lang.model.util.TypeKindVisitor6 --|> java.lang.Object

javax.lang.model.util.TypeKindVisitor7 --|> javax.lang.model.util.TypeKindVisitor6

javax.lang.model.util.TypeKindVisitor8 --|> javax.lang.model.util.TypeKindVisitor7

javax.lang.model.util.TypeKindVisitor9 --|> javax.lang.model.util.TypeKindVisitor8



@enduml